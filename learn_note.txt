工作区：正常文件系统，非git区域
暂存区：stage
分支：最后保存的位置，版本库

git add <file1> <file2> ……  //提交到stage
git commit -m <str>   //向分支提交并注释
git status            //查看递交区和stage状态
git diff HEAD -- <files>
  git diff //显示当前工作区的文件和stage区文件的差异
  git diff --staged //显示stage区和HEAD的文件的差异
  git diff HEAD //显示工作区和上次递交文件的差异
git log //最近到最远的提交日志
git log --graph --pretty=oneline --abbrev-commit
//--graph 图；--pretty=oneline 一行；--abbrev-commit 简短id

git checkout --<files> //把文件在工作区的修改全部撤销
  还没有被放到暂存区，撤销修改就回到和版本库一模一样的状态；
  已经添加到暂存区后，撤销修改就回到添加到暂存区后的状态。
  "git checkout -- file"命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
git reset --hard <版本号（HEAD=现在；^=上一个>    //版本回退
git reflog            //操作变动（不包括stage）

init:
git remote add origin git@github.com:shinpoi/git_learn.git
git push -u origin master //-u:关联本地和远程的master分支

git push origin master    //本地的master分支push到origin（远程库的名字）
git clone git@github.com:<id>/<repositories>.git    //git clone +adress

branch:
git checkout -b <branch>  //-b参数表示创建并切换
  git branch <branch>
  git checkout <branch>
git branch  //查看所有分支

git merge <branch>  //合并指定分支到当前分支
git merge --no-ff <branch>  //--no-ff means merge with no-Fast forward
git branch -d <branch>    //-d delet（未合并时无法删除，可以-D 强制删除）

git stash   //备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。
git stash list
git stash apply   //恢复但不清空栈
git stash drop
git stash pop     //恢复并清空栈

git remote (-v)   //查看远程库信息(-v 详细)

tags:
git tag <tagname> (commit_ID)    //为当前版本(其他版本)添加标签
git tag     //查看标签
git show <tagname>    //查看标签详细信息
$ git tag -a <tagname>  -m <information> <commit_ID>
//-a 标签名  -m 备注
git tag -d v0.1   //只删除标签本身
git push origin <tagname>
git push origin --tags

删除远程：
git branch -a //-a 远程分支用红字表示
git push origin --delete <branchName>
git push origin --delete tag <tagname>

 or

git tag -d v0.9   //先删本地
git push origin :refs/tags/v0.9 //推送一个空tag到远程（删除）
git push origin :<branchName>   //推送一个空分支到远程
